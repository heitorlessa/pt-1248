AWSTemplateFormatVersion: 2010-09-09
Transform: "AWS::Serverless-2016-10-31"
Description: |
  Repro AWS Lambda Powertools for Python Issue 1248 (ALB+CORS)

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>

# Global values that are applied to all applicable resources in this template
Globals:
  Function:
    Runtime: provided.al2
    Timeout: 10
    Tracing: Active
    Environment:
      Variables:
        POWERTOOLS_SERVICE_NAME: sample
        POWERTOOLS_LOGGER_LOG_EVENT: true
  Api:
    Cors:
      AllowMethods: "'GET'"
      AllowHeaders: "'Content-Type, X-Forwarded-For'"
      AllowOrigin: "'*'"
      MaxAge: "'1'"

Resources:
  ##########################################################################
  #   Lambda Function                                                      #
  ##########################################################################

  MyLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.9
      CodeUri: src
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPython:20
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /hello
            Method: ANY

  MyLambdaFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt MyLambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: elasticloadbalancing.amazonaws.com

  ##########################################################################
  #  Application Load Balancer                                             #
  ##########################################################################

  MyLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internet-facing
      Subnets: !Ref Subnets
      SecurityGroups: [!Ref MySecurityGroup]

  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: MyLambdaFunctionPermission
    Properties:
      TargetType: lambda
      Targets:
        - Id: !GetAtt MyLambdaFunction.Arn

  MyHttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref MyLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - TargetGroupArn: !Ref MyTargetGroup
          Type: forward

  # MyHttpsListener: #A certificate must be specified for HTTPS listeners
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Properties:
  #     LoadBalancerArn: !Ref MyLoadBalancer
  #     Port: 443
  #     Protocol: HTTPS
  #     Certificates:
  #       - !GetAtt MyListenerCertificate.Arn
  #     DefaultActions:
  #       - TargetGroupArn: !Ref MyTargetGroup
  #         Type: forward

  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Ref AWS::StackName
      GroupDescription: Allow http on port 80 and 443
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        # - IpProtocol: tcp #A certificate must be specified for HTTPS listeners
        #   FromPort: 443
        #   ToPort: 443
        #   CidrIp: 0.0.0.0/0

Outputs:
  EndpointUrl:
    Value: !Sub "http://${MyLoadBalancer.DNSName}/hello"

  ApiEndpointUrl:
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello"
